{"version":3,"sources":["Handleclick.tsx","theme/index.tsx","Components/Calculator/useCalculatorStyles.ts","Components/Row/useRowStyles.ts","Components/Button/useButtonStyles.ts","Components/Button/index.tsx","Components/Row/index.tsx","Components/DisplayBox/useDisplayStyles.ts","Components/DisplayBox/index.tsx","Components/Calculator/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isDigit","pet","undefined","handleClick","clicked","displayValue","setDisplay","setResult","setOperand","setMemory","memory","operand","console","log","length","String","concat","includes","Number","eval","theming","defaultTheme","borderDefault","navDropShadow","navLogoSize","transitionTime","font","thin","fontFamily","fontStyle","fontWeight","extraLight","light","regular","medium","semiBold","bold","extraBold","black","palette","white","transparent","primary","fsBlue","fsBluePrimary","fsBlueSecondary","fsDarkBlue","fsDarkBlueSub","secondary","turquoise","red","green","yellow","grays","dark","neutralWarm","neutralCool","neutralCoolTransparent","opacity","alpha60","alpha30","chart","blue","orange","gray","purple","scales","spacing","xsmall","small","normal","large","input","widths","height","icon","xxsmall","button","page","maxWidth","tooltip","minWidth","grid","width","padding","paddingTop","paddingBottom","zIndex","popup","overlay","overlayContent","themeContext","createContext","siteTheming","createTheming","createThemedUseStyles","ThemeProvider","useTheme","styles","options","createUseStyles","theme","calculator","backgroundColor","margin","boxShadow","borderRadius","row","display","flexDirection","backgroundcolot","justifyContent","alignItems","textAlign","flexGrow","props","buttonValue","marginTop","verticalAlign","fontSize","color","background","outline","border","Button","useButtonStyles","className","onClick","setDisplayValue","Row","useRowStyles","buttonValue1","buttonValue2","buttonValue3","buttonValue4","Display","displayText","DisplayBox","useDisplayBoxStyles","Calculator","useState","calculatorStyles","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c1cc8ba.chunk.js","sourcesContent":["import { Digit, Operator } from \"./lib/types\";\r\nimport { memo } from \"react\";\r\n\r\nfunction isDigit(pet: Digit | Operator): pet is Digit {\r\n  return (pet as Digit) !== undefined;\r\n}\r\n\r\nfunction handleClick(\r\n  clicked: Digit | Operator,\r\n  displayValue: string,\r\n  setDisplay: React.Dispatch<React.SetStateAction<string>>,\r\n  setResult: React.Dispatch<React.SetStateAction<number>>,\r\n  setOperand: React.Dispatch<React.SetStateAction<Operator>>,\r\n  setMemory: React.Dispatch<React.SetStateAction<string>>,\r\n  memory: string,\r\n  operand: string\r\n): void {\r\n  console.log(\"memory = \", memory);\r\n  if (typeof clicked == \"number\") {\r\n    if (displayValue.length <= 1 && displayValue == \"0\" && operand == \"\") {\r\n      setDisplay(String(clicked));\r\n      return;\r\n    } else if (displayValue == \"-0\") {\r\n      setDisplay(\"-\".concat(String(clicked)));\r\n      return;\r\n    } else if (operand != \"\") {\r\n      setDisplay(String(clicked));\r\n      setMemory(memory.concat(operand));\r\n      setOperand(\"\");\r\n      return;\r\n    }\r\n\r\n    setDisplay(displayValue.concat(String(clicked)));\r\n    setOperand(\"\");\r\n  } else {\r\n    //not a digit section\r\n    switch (clicked) {\r\n      case \".\":\r\n        if (displayValue.includes(\".\")) {\r\n          return;\r\n        } else {\r\n          setDisplay(displayValue.concat(String(clicked)));\r\n          return;\r\n        }\r\n      case \"AC\":\r\n        setDisplay(\"0\");\r\n        setResult(0);\r\n        setMemory(\"\");\r\n        setOperand(\"\");\r\n        break;\r\n\r\n      case \"+/-\":\r\n        console.log(\"here in +/-\");\r\n        switch (displayValue) {\r\n          case \"0\":\r\n            setDisplay(\"-0\");\r\n            break;\r\n\r\n          case \"-0\":\r\n            setDisplay(\"0\");\r\n            break;\r\n\r\n          default:\r\n            setDisplay(String(Number(displayValue) * -1));\r\n            break;\r\n        }\r\n      case \"=\":\r\n        memory = memory.concat(displayValue);\r\n        setMemory(memory); //why not working?\r\n        console.log(\"memory = \", memory);\r\n        displayValue = String(eval(memory));\r\n        setDisplay(displayValue);\r\n        console.log(\"result gets calced here\");\r\n        setOperand(\"\");\r\n        memory = \"\";\r\n        operand = \"\";\r\n        setMemory(\"\");\r\n        break;\r\n      default:\r\n        //operand\r\n        if (operand == \"\") {\r\n          setMemory(memory.concat(displayValue));\r\n        }\r\n        setOperand(clicked);\r\n        break;\r\n    }\r\n\r\n    if (clicked === \"AC\") {\r\n      setDisplay(\"0\");\r\n      setResult(0);\r\n    }\r\n  }\r\n}\r\n\r\nexport default handleClick;\r\n","import { createContext } from \"react\";\r\nimport { createTheming, createUseStyles } from \"react-jss\";\r\nimport { StyleSheetFactoryOptions } from \"jss\";\r\nimport { Theming } from \"theming\";\r\n\r\nexport class AppTheme {\r\n  // begin remove these and use palette colors.\r\n  borderDefault = \"1px solid #B7C2C6\";\r\n  navDropShadow = \"0px 5px 5px #EEEEEE\";\r\n  navLogoSize = \"36px\";\r\n  transitionTime = \"250ms\";\r\n  // end remove\r\n\r\n  // Inter font does not support italics\r\n  font = {\r\n    thin: {\r\n      fontFamily: \"Inter\",\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"100\"\r\n    },\r\n    extraLight: {\r\n      fontFamily: \"Inter\",\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"200\"\r\n    },\r\n    light: {\r\n      fontFamily: \"Inter\",\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"300\"\r\n    },\r\n    regular: {\r\n      fontFamily: \"Inter\",\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"400\"\r\n    },\r\n    medium: {\r\n      fontFamily: \"Inter\",\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"500\"\r\n    },\r\n    semiBold: {\r\n      fontFamily: \"Inter\",\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"600\"\r\n    },\r\n    bold: {\r\n      fontFamily: \"Inter\",\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"700\"\r\n    },\r\n    extraBold: {\r\n      fontFamily: \"Inter\",\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"800\"\r\n    },\r\n    black: {\r\n      fontFamily: \"Inter\",\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"900\"\r\n    }\r\n  };\r\n\r\n  /** Colors used in the application, do not add colors without reviewing with feature team leads. */\r\n  palette = {\r\n    white: \"#ffffff\",\r\n    transparent: \"transparent\",\r\n    primary: {\r\n      /** Use cases: Primary Actions */\r\n      fsBlue: \"#149EC6\",\r\n      /** Use cases: Hover */\r\n      fsBluePrimary: \"#1487AB\",\r\n      /** Use cases: Hover */\r\n      fsBlueSecondary: \"#E7F5F9\",\r\n      /** Use cases: Navigation BG, Text */\r\n      fsDarkBlue: \"#162E3F\",\r\n      /** Use cases: Sub-Navigation Menu */\r\n      fsDarkBlueSub: \"#2D4253\"\r\n    },\r\n    secondary: {\r\n      /** Use cases: Icons */\r\n      turquoise: \"#5EBFC0\",\r\n      /** Use cases: Icons/Error */\r\n      red: \"#C76767\",\r\n      /** Use cases: Icons/Status */\r\n      green: \"#91C340\",\r\n      /** Use cases: Icons/Status */\r\n      yellow: \"#EDC53E\"\r\n    },\r\n    grays: {\r\n      /** Use cases: Text */\r\n      dark: \"#3F4750\",\r\n      /** Use cases: Disabled Text Labels */\r\n      neutralWarm: \"#A5A9B0\",\r\n      /** Use cases: Dividers */\r\n      neutralCool: \"#B7C2C6\",\r\n      /** Use cases: Product Background */\r\n      light: \"#EAECF1\",\r\n      /** Use cases: Component Background, Zebra Striping */\r\n      extraLight: \"#F6F7FA\",\r\n      /** Use cases: SideNav divider */\r\n      neutralCoolTransparent: \"rgba(183,194,198,0.3)\"\r\n    },\r\n    opacity: {\r\n      // https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4\r\n      alpha60: \"99\", // 60%\r\n      alpha30: \"4D\" // 30%\r\n    },\r\n    chart: {\r\n      primary: {\r\n        blue: \"#4472C4\",\r\n        orange: \"#ED7D31\",\r\n        gray: \"#A5A5A5\",\r\n        yellow: \"#FFC000\",\r\n        purple: \"#AA77B4\"\r\n      },\r\n      secondary: {\r\n        green: \"#70AD47\"\r\n      }\r\n    }\r\n  };\r\n  scales = {\r\n    spacing: {\r\n      xsmall: 2,\r\n      small: 4,\r\n      normal: 8,\r\n      medium: 20,\r\n      large: 40\r\n    },\r\n    input: {\r\n      widths: {\r\n        xsmall: 84,\r\n        small: 170,\r\n        medium: 400,\r\n        large: 810\r\n      },\r\n      height: {\r\n        xsmall: 28,\r\n        small: 36,\r\n        medium: 48,\r\n        large: 132\r\n      }\r\n    },\r\n    icon: {\r\n      xxsmall: 12,\r\n      xsmall: 16,\r\n      small: 20,\r\n      medium: 24\r\n    },\r\n    button: {\r\n      widths: {\r\n        small: 134,\r\n        medium: 190\r\n      }\r\n    },\r\n    page: {\r\n      maxWidth: 1280\r\n    },\r\n    tooltip: {\r\n      minWidth: 150\r\n    },\r\n    grid: {\r\n      width: {\r\n        xsmall: 50,\r\n        small: 100\r\n      },\r\n      padding: 20,\r\n      paddingTop: 14,\r\n      paddingBottom: 14\r\n    }\r\n  };\r\n  zIndex = {\r\n    popup: 10,\r\n    overlay: 20,\r\n    overlayContent: 21,\r\n    tooltip: 100\r\n  };\r\n}\r\n\r\nconst defaultTheme = new AppTheme();\r\n\r\nconst themeContext = createContext(defaultTheme);\r\nconst siteTheming = createTheming(themeContext);\r\nconst { ThemeProvider, useTheme } = siteTheming;\r\n\r\nconst createUseStylesFactory = function <T extends object>(\r\n  theming: Theming<T>\r\n) {\r\n  return function <C extends string>(\r\n    styles: (theme: T) => Record<C, any>,\r\n    options?: {\r\n      index?: number;\r\n      name?: string;\r\n    } & StyleSheetFactoryOptions\r\n  ) {\r\n    return createUseStyles(styles, { ...options, theming: theming as any });\r\n  };\r\n};\r\n\r\nvar createThemedUseStyles = createUseStylesFactory(siteTheming);\r\n\r\nexport {\r\n  ThemeProvider,\r\n  useTheme,\r\n  defaultTheme,\r\n  siteTheming as theming,\r\n  createThemedUseStyles\r\n};\r\n","import { createThemedUseStyles } from \"../../theme\";\r\n\r\nexport default createThemedUseStyles((theme) => ({\r\n  calculator: {\r\n    width: 300,\r\n    height: 600,\r\n    backgroundColor: \"#1F1716\",\r\n    paddingTop: 25,\r\n    margin: \"auto\",\r\n    boxShadow:\r\n      \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\r\n    borderRadius: \"25px;\",\r\n  },\r\n}));\r\n","import { createThemedUseStyles } from \"../../theme\";\r\n\r\nexport default createThemedUseStyles((theme) => ({\r\n  row: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    width: \"100%\",\r\n    height: 100,\r\n    backgroundcolot: \"blue\",\r\n  },\r\n}));\r\n","import { createThemedUseStyles } from \"../../theme\";\r\nimport { ButtonProps } from \".\";\r\n\r\nexport default createThemedUseStyles((theme) => ({\r\n  button: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n    flexGrow: (props: ButtonProps) => (props.buttonValue === 0 ? 2 : 1),\r\n    marginTop: \"10px\",\r\n    verticalAlign: \"middle\",\r\n    height: \"80px\",\r\n    //borderRadius: \"20px\",\r\n    // border: \"3px solid white\",\r\n    fontSize: \"28px\",\r\n    color: \"black\",\r\n    fontFamily: \"Orbitron, serif\",\r\n    background: \"#dfe6e9\",\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n    \"&:hover\": {\r\n      border: \"3px solid #e17055\",\r\n      fontWeight: 500,\r\n    },\r\n  },\r\n}));\r\n","import React, { Component } from \"react\";\r\nimport { Operator, Digit } from \"../../lib/types\";\r\nimport useButtonStyles from \"./useButtonStyles\";\r\nimport handleClick from \"../../Handleclick\";\r\n\r\nexport type ButtonProps = {\r\n  buttonValue: Digit | Operator;\r\n  display: string;\r\n  setDisplayValue: React.Dispatch<React.SetStateAction<string>>;\r\n  setOperand: React.Dispatch<React.SetStateAction<Operator>>;\r\n  setResult: React.Dispatch<React.SetStateAction<number>>;\r\n  setMemory: React.Dispatch<React.SetStateAction<string>>;\r\n  memory: string;\r\n  operand: string;\r\n};\r\n\r\nconst Button: React.FC<ButtonProps> = (props) => {\r\n  const styles = useButtonStyles(props);\r\n\r\n  return (\r\n    <div\r\n      className={styles.button}\r\n      onClick={() =>\r\n        handleClick(\r\n          props.buttonValue,\r\n          props.display ?? \"0\",\r\n          props.setDisplayValue,\r\n          props.setResult,\r\n          props.setOperand,\r\n          props.setMemory,\r\n          props.memory,\r\n          props.operand\r\n        )\r\n      }\r\n    >\r\n      <div>{props.buttonValue}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport { Operator, Digit } from \"../../lib/types\";\r\nimport useRowStyles from \"./useRowStyles\";\r\nimport Button from \"../Button\";\r\n\r\nexport type RowProps = {\r\n  buttonValue1: Digit | Operator;\r\n  buttonValue2: Digit | Operator;\r\n  buttonValue3: Digit | Operator;\r\n  buttonValue4?: Digit | Operator;\r\n  display: string;\r\n  setDisplayValue: React.Dispatch<React.SetStateAction<string>>;\r\n  setOperand: React.Dispatch<React.SetStateAction<Operator>>;\r\n  setResult: React.Dispatch<React.SetStateAction<number>>;\r\n  setMemory: React.Dispatch<React.SetStateAction<string>>;\r\n  memory: string;\r\n  operand: string;\r\n};\r\n\r\nconst Row: React.FC<RowProps> = (props) => {\r\n  const styles = useRowStyles();\r\n\r\n  return (\r\n    <div className={styles.row}>\r\n      <Button\r\n        buttonValue={props.buttonValue1}\r\n        setDisplayValue={props.setDisplayValue}\r\n        display={props.display}\r\n        setResult={props.setResult}\r\n        setOperand={props.setOperand}\r\n        setMemory={props.setMemory}\r\n        memory={props.memory}\r\n        operand={props.operand}\r\n      />\r\n      <Button\r\n        buttonValue={props.buttonValue2}\r\n        setDisplayValue={props.setDisplayValue}\r\n        display={props.display}\r\n        setResult={props.setResult}\r\n        setOperand={props.setOperand}\r\n        setMemory={props.setMemory}\r\n        memory={props.memory}\r\n        operand={props.operand}\r\n      />\r\n      <Button\r\n        buttonValue={props.buttonValue3}\r\n        setDisplayValue={props.setDisplayValue}\r\n        display={props.display}\r\n        setResult={props.setResult}\r\n        setOperand={props.setOperand}\r\n        setMemory={props.setMemory}\r\n        memory={props.memory}\r\n        operand={props.operand}\r\n      />\r\n      {props.buttonValue4 && (\r\n        <Button\r\n          buttonValue={props.buttonValue4}\r\n          setDisplayValue={props.setDisplayValue}\r\n          display={props.display}\r\n          setResult={props.setResult}\r\n          setOperand={props.setOperand}\r\n          setMemory={props.setMemory}\r\n          memory={props.memory}\r\n          operand={props.operand}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import { createThemedUseStyles } from \"../../theme\";\r\n\r\nexport default createThemedUseStyles((theme) => ({\r\n  Display: {\r\n    backgroundColor: \"lightgrey\",\r\n    width: \"100%\",\r\n    height: \"80px\",\r\n    fontSize: \"2rem\",\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n  },\r\n  displayText: {\r\n    padding: 15,\r\n  },\r\n}));\r\n","import React, { Component } from \"react\";\r\nimport { Operator } from \"../../lib/types\";\r\nimport useDisplayBoxStyles from \"./useDisplayStyles\";\r\n\r\nexport type DisplayProps = {\r\n  displayValue?: string;\r\n  setMemory?: React.Dispatch<React.SetStateAction<number>>;\r\n  setOperand?: React.Dispatch<React.SetStateAction<Operator>>;\r\n};\r\n\r\nconst DisplayBox: React.FC<DisplayProps> = (props) => {\r\n  const styles = useDisplayBoxStyles();\r\n  return (\r\n    <div className={styles.Display}>\r\n      {/* end goal is not to use null check */}\r\n      <div className={styles.displayText}>{props.displayValue ?? \"0\"}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayBox;\r\n","import React, { Component, useState } from \"react\";\r\nimport { Digit, Operator } from \"../../lib/types\";\r\nimport calculatorStyles from \"./useCalculatorStyles\";\r\nimport Row from \"../Row\";\r\nimport DisplayBox from \"../DisplayBox\";\r\n\r\nconst Calculator: React.FC = function ({}) {\r\n  const [display, setDisplayValue] = useState<string>(\"0\");\r\n  const [result, setResult] = useState<number>(0);\r\n  const [memory, setMemory] = useState<string>(\"\");\r\n  const [operand, setOperand] = useState<Operator>(\"\");\r\n  const styles = calculatorStyles();\r\n  return (\r\n    <div className={styles.calculator}>\r\n      <DisplayBox displayValue={display} />\r\n      <Row\r\n        buttonValue1={\"AC\"}\r\n        buttonValue2={\"+/-\"}\r\n        buttonValue3={\"%\"}\r\n        buttonValue4={\"/\"}\r\n        setDisplayValue={setDisplayValue}\r\n        display={display}\r\n        setOperand={setOperand}\r\n        setResult={setResult}\r\n        setMemory={setMemory}\r\n        memory={memory}\r\n        operand={operand}\r\n      />\r\n      <Row\r\n        buttonValue1={9}\r\n        buttonValue2={8}\r\n        buttonValue3={7}\r\n        buttonValue4={\"*\"}\r\n        setDisplayValue={setDisplayValue}\r\n        display={display}\r\n        setOperand={setOperand}\r\n        setResult={setResult}\r\n        setMemory={setMemory}\r\n        memory={memory}\r\n        operand={operand}\r\n      />\r\n      <Row\r\n        buttonValue1={6}\r\n        buttonValue2={5}\r\n        buttonValue3={4}\r\n        buttonValue4={\"-\"}\r\n        setDisplayValue={setDisplayValue}\r\n        display={display}\r\n        setOperand={setOperand}\r\n        setResult={setResult}\r\n        setMemory={setMemory}\r\n        memory={memory}\r\n        operand={operand}\r\n      />\r\n      <Row\r\n        buttonValue1={3}\r\n        buttonValue2={2}\r\n        buttonValue3={1}\r\n        buttonValue4={\"+\"}\r\n        setDisplayValue={setDisplayValue}\r\n        display={display}\r\n        setOperand={setOperand}\r\n        setResult={setResult}\r\n        setMemory={setMemory}\r\n        memory={memory}\r\n        operand={operand}\r\n      />\r\n      <Row\r\n        buttonValue1={0}\r\n        buttonValue2={\".\"}\r\n        buttonValue3={\"=\"}\r\n        setDisplayValue={setDisplayValue}\r\n        display={display}\r\n        setOperand={setOperand}\r\n        setResult={setResult}\r\n        setMemory={setMemory}\r\n        memory={memory}\r\n        operand={operand}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n","import React, { FunctionComponent, useState } from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./Components/Calculator\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}